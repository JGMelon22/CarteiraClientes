// <auto-generated />
using System;
using CarteiraClientes.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarteiraClientes.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231111184400_InitialSeedData")]
    partial class InitialSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarteiraClientes.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<byte>("Age")
                        .HasColumnType("smallint")
                        .HasColumnName("age");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar")
                        .HasColumnName("document");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar")
                        .HasColumnName("gender");

                    b.Property<bool>("IsOverdue")
                        .HasColumnType("boolean")
                        .HasColumnName("is_overdue");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("client_id_idx");

                    b.ToTable("clients", (string)null);

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Age = (byte)18,
                            Document = "123456789",
                            FullName = "Allissa Victória da Silva",
                            Gender = "Female",
                            IsOverdue = false
                        },
                        new
                        {
                            ClientId = 2,
                            Age = (byte)25,
                            Document = "987654321",
                            FullName = "João Oliveira",
                            Gender = "Male",
                            IsOverdue = true
                        },
                        new
                        {
                            ClientId = 3,
                            Age = (byte)30,
                            Document = "456789123",
                            FullName = "Maria Santos",
                            Gender = "Female",
                            IsOverdue = false
                        },
                        new
                        {
                            ClientId = 4,
                            Age = (byte)22,
                            Document = "234567890",
                            FullName = "Carlos Pereira",
                            Gender = "Male",
                            IsOverdue = true
                        },
                        new
                        {
                            ClientId = 5,
                            Age = (byte)28,
                            Document = "345678901",
                            FullName = "Ana Oliveira",
                            Gender = "Female",
                            IsOverdue = false
                        },
                        new
                        {
                            ClientId = 6,
                            Age = (byte)35,
                            Document = "456789012",
                            FullName = "Pedro Silva",
                            Gender = "Male",
                            IsOverdue = true
                        },
                        new
                        {
                            ClientId = 7,
                            Age = (byte)40,
                            Document = "567890123",
                            FullName = "Camila Santos",
                            Gender = "Female",
                            IsOverdue = false
                        },
                        new
                        {
                            ClientId = 8,
                            Age = (byte)32,
                            Document = "678901234",
                            FullName = "Felipe Oliveira",
                            Gender = "Male",
                            IsOverdue = true
                        },
                        new
                        {
                            ClientId = 9,
                            Age = (byte)27,
                            Document = "789012345",
                            FullName = "Juliana Silva",
                            Gender = "Female",
                            IsOverdue = false
                        },
                        new
                        {
                            ClientId = 10,
                            Age = (byte)24,
                            Document = "890123456",
                            FullName = "Lucas Pereira",
                            Gender = "Male",
                            IsOverdue = true
                        });
                });

            modelBuilder.Entity("CarteiraClientes.Models.ClientCompany", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.HasKey("ClientId", "CompanyId");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("client_company_client_id_idx");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("client_company_company_id_idx");

                    b.ToTable("clients_companies", (string)null);

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 2,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 3,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 4,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 5,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 6,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 7,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 8,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 9,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 10,
                            CompanyId = 1
                        },
                        new
                        {
                            ClientId = 1,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 2,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 3,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 4,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 5,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 6,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 7,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 8,
                            CompanyId = 2
                        },
                        new
                        {
                            ClientId = 1,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 2,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 3,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 4,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 5,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 6,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 7,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 8,
                            CompanyId = 3
                        },
                        new
                        {
                            ClientId = 1,
                            CompanyId = 4
                        },
                        new
                        {
                            ClientId = 2,
                            CompanyId = 4
                        },
                        new
                        {
                            ClientId = 3,
                            CompanyId = 4
                        },
                        new
                        {
                            ClientId = 4,
                            CompanyId = 4
                        },
                        new
                        {
                            ClientId = 5,
                            CompanyId = 4
                        },
                        new
                        {
                            ClientId = 6,
                            CompanyId = 4
                        },
                        new
                        {
                            ClientId = 7,
                            CompanyId = 4
                        },
                        new
                        {
                            ClientId = 10,
                            CompanyId = 5
                        },
                        new
                        {
                            ClientId = 9,
                            CompanyId = 5
                        },
                        new
                        {
                            ClientId = 8,
                            CompanyId = 5
                        },
                        new
                        {
                            ClientId = 7,
                            CompanyId = 5
                        },
                        new
                        {
                            ClientId = 6,
                            CompanyId = 5
                        },
                        new
                        {
                            ClientId = 5,
                            CompanyId = 5
                        },
                        new
                        {
                            ClientId = 4,
                            CompanyId = 5
                        },
                        new
                        {
                            ClientId = 4,
                            CompanyId = 6
                        },
                        new
                        {
                            ClientId = 5,
                            CompanyId = 6
                        },
                        new
                        {
                            ClientId = 6,
                            CompanyId = 6
                        },
                        new
                        {
                            ClientId = 7,
                            CompanyId = 6
                        },
                        new
                        {
                            ClientId = 8,
                            CompanyId = 6
                        });
                });

            modelBuilder.Entity("CarteiraClientes.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("date")
                        .HasColumnName("founded_date");

                    b.Property<decimal>("Revenue")
                        .HasPrecision(20, 2)
                        .HasColumnType("decimal")
                        .HasColumnName("revenue");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasDatabaseName("company_id_idx");

                    b.ToTable("companies", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "Banco do Brasil",
                            FoundedDate = new DateTime(1922, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Revenue = 28820000000.00m
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "Tech Solutions Inc.",
                            FoundedDate = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Revenue = 15500000000.00m
                        },
                        new
                        {
                            CompanyId = 3,
                            CompanyName = "Global Motors",
                            FoundedDate = new DateTime(1985, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Revenue = 10200000000.00m
                        },
                        new
                        {
                            CompanyId = 4,
                            CompanyName = "Food Delights Co.",
                            FoundedDate = new DateTime(2010, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Revenue = 5750000000.00m
                        },
                        new
                        {
                            CompanyId = 5,
                            CompanyName = "Fashion Trends Ltd.",
                            FoundedDate = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Revenue = 8300000000.00m
                        },
                        new
                        {
                            CompanyId = 6,
                            CompanyName = "Green Energy Solutions",
                            FoundedDate = new DateTime(2008, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Revenue = 3600000000.00m
                        });
                });

            modelBuilder.Entity("CarteiraClientes.Models.ClientCompany", b =>
                {
                    b.HasOne("CarteiraClientes.Models.Client", "Client")
                        .WithMany("ClientsCompanies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarteiraClientes.Models.Company", "Company")
                        .WithMany("ClientsCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CarteiraClientes.Models.Client", b =>
                {
                    b.Navigation("ClientsCompanies");
                });

            modelBuilder.Entity("CarteiraClientes.Models.Company", b =>
                {
                    b.Navigation("ClientsCompanies");
                });
#pragma warning restore 612, 618
        }
    }
}
